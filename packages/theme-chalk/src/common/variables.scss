@use "sass:map";
@use "sass:math";

@import '../mixins/config.scss';

// types
$--types: primary, success, warning, danger, error, info;


/* Color
-------------------------- */
$--colors: () !default;
$--colors: map.deep-merge(
  (
    'white': #ffffff,
    'black': #000000,
    'primary': (
      'base': #409eff,
    ),
    'success': (
      'base': #67c23a,
    ),
    'warning': (
      'base': #e6a23c,
    ),
    'danger': (
      'base': #f56c6c,
    ),
    'error': (
      'base': #f56c6c,
    ),
    'info': (
      'base': #909399,
    ),
  ),
  $--colors
);


$--color-primary: map.get($--colors, 'primary', 'base') !default;
$--color-white: map.get($--colors, 'white') !default;
$--color-black: map.get($--colors, 'black') !default;
$--color-success: map.get($--colors, 'success', 'base') !default;
$--color-warning: map.get($--colors, 'warning', 'base') !default;
$--color-danger: map.get($--colors, 'danger', 'base') !default;
$--color-info: map.get($--colors, 'info', 'base') !default;


@mixin set-color-type-light($type, $number) {
  $--colors: map.deep-merge(
    (
      $type: (
        'light-#{$number}':
          mix(
            $--color-white,
            map.get($--colors, $type, 'base'),
            math.percentage(math.div($number, 10)), /* math.div --> Returns the result of dividing $number1 by $number2. */
          ),
      ),
    ),
    $--colors
  ) !global;
}


// $--colors.primary.light-i
// --y-color-primary-lighgt-i
// 10% 53a8ff
// 20% 66b1ff
// 30% 79bbff
// 40% 8cc5ff
// 50% a0cfff
// 60% b3d8ff
// 70% c6e2ff
// 80% d9ecff
// 90% ecf5ff
@for $i from 1 through 9 {
  @each $type in $--types {
    @include set-color-type-light($type, $i);
  }
}


$--text-color: () !default;
$--text-color: map.merge(
  (
    'primary': #303133,
    'regular': #606266,
    'secondary': #909399,
    'placeholder': #c0c4cc,
  ),
  $--text-color
);

$--border-color: () !default;
$--border-color: map.merge(
  (
    'base': #dcdfe6,
    'light': #e4e7ed,
    'lighter': #ebeef5,
    'extra-light': #f2f6fc,
  ),
  $--border-color
);


// Background
/// color|1|Background Color|4
$--background-color-base: #f5f7fa !default;

/* Border
-------------------------- */
$--border-width-base: 1px !default;
$--border-style-base: solid !default;
$--border-color-hover: var(--y-text-color-placeholder) !default;
$--border-base: $--border-width-base $--border-style-base
  map.get($--border-color, 'base') !default;


/* Button
-------------------------- */
// css3 var in packages/theme-chalk/src/button.scss
// sass map 函数

$--button: () !default;
$--button: map.merge(
  (
    'font-weight': var(--y-font-weight-primary),
    'border-color': var(--y-border-color-base),
    'background-color': var(--y-color-white),
    'font-color': var(--y-text-color-regular),
    'disabled-font-color': var(--y-text-color-placeholder),
    'disabled-background-color': var(--y-color-white),
    'disabled-border-color': var(--y-border-color-light),
    'divide-border-color': rgba($--color-white, 0.5),
  ),
  $--button
);

$--button-border-radius: () !default;
$--button-border-radius: map.merge(
  (
    'default': var(--y-border-radius-base),
    'medium': var(--y-border-radius-base),
    'small': calc(var(--y-border-radius-base), - 1px),
    'mini': calc(var(--y-border-radius-base), - 1px),
  ),
  $--button-border-radius
);

$--button-padding-vertical: () !default;
$--button-padding-vertical: map.merge(
  (
    'default': 12px,
    'medium': 10px,
    'small': 9px,
    'mini': 7px,
  ),
  $--button-padding-vertical
);